from django.shortcuts import render, redirect
from django.core.urlresolvers import reverse
from bs4 import BeautifulSoup
from django import forms
from django.utils.html import mark_safe
from questionnaire.models import Survey, Response, Answer
from django.shortcuts import get_object_or_404
import cups
from django.conf import settings

class SurveyForm(forms.Form):
    def __init__(self, *args, **kwargs):
        fields = kwargs.pop('fields')
        super(SurveyForm, self).__init__(*args, **kwargs)
        for i, value in enumerate(fields):
            field = None
            if value[1] == 'text':
                field = forms.CharField(label=value[0], required=value[3])
            elif value[1] == 'textarea':
                field = forms.CharField(widget=forms.Textarea, label=value[0], required=value[3])
            elif value[1] == 'radio':
                field = forms.ChoiceField(widget=forms.RadioSelect, label=value[0], required=value[3], choices=value[4])
            elif value[1] == 'checkboxgroup':
                field = forms.MultipleChoiceField(widget=forms.CheckboxSelectMultiple, label=value[0], required=value[3], choices=value[4])
            if field is not None:
                self.fields['q_%s' % i] = field;
    def answers(self):
        for name, value in self.cleaned_data.items():
            if name.startswith('q_'):
                yield (self.fields[name].name, value)

def c(l):
    return "".join(unicode(item) for item in l.contents)

def getQuestions(xml):
    soup = BeautifulSoup(xml)
    types = ('text', 'textarea', 'radio', 'checkboxgroup',)
    fields = []
    survey = soup.questionnaire.contents
    for child in survey:
        if hasattr(child, 'name') and child.name in types:
            question = c(child).replace('\n', '')
            type = child.name
            options = None
            if child.name in ('radio', 'checkboxgroup',):
                options = question.split('* ')
                question = options.pop(0)
                choices = []
                for i, option in enumerate(options):
                    choices.append((str(i), option.translate(string.maketrans("\n\r\t", "   ")),))
                options = tuple(choices)
            if child.has_key('required'):
                required = True
            else:
                required = False
#            question = question.translate(string.maketrans("\n\t\r", "   "))
            fields.append([question, type, options, required, options])
    return fields

def index(request):
    if Survey.objects.count() == 1:
        id = Survey.objects.all()[:1].get().id
    else:
        id = Survey.objects.filter(active=True).get.id
    return redirect(reverse('questionnaire:survey', kwargs={'survey_id': id}))

def survey(request, survey_id):
    survey = get_object_or_404(Survey, id=survey_id)
    soup = BeautifulSoup(survey.markup)
    fields = getQuestions(survey.markup)
    form = SurveyForm(request.POST or None, fields = fields)
    if form.is_valid():
        response = Response(survey=survey)
        response.save()
        for (question, answer) in form.answers():
            response.answer_set.create(question_id=question, answer=answer)
        confirmation = c(soup.questionnaire.confirmation)
        path = settings.MEDIA_ROOT+'questionnaire/receipt.pdf'
        printer = cups.Connection()
        ptinter.printFile(settings.QUESTIONNAIRE_PRINTER, path, 'Questionnaire', {})
        return render(request, 'questionnaire/printing.html', {'name': survey.name, 'confirmation': mark_safe(confirmation)})

    introduction = c(soup.questionnaire.introduction)
    context = {'name': survey.name, 'introduction': mark_safe(introduction), 'form': form}
    return render(request, 'questionnaire/form.html', context)
